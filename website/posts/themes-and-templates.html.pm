#lang pollen

◊(define-meta title "Themes and Templates"
   started "2020-12-18"
   published "2020-12-18"
   )

With the ◊a["extracting-reusable-code.html"]{most recent refactoring}, Colophon
has a basic, but functional theming system. Since Colophon is a system for
building websites, themes are written as CSS (though in the future themes could
be written in something like
◊a["https://docs.racket-lang.org/css-expr/"]{CSS-expressions}).

◊more{}

For now, Colophon themes only allow for customizing the colors of various
elements using CSS variables. In the future, this could be extended to customize
fonts and other layout elements. But to properly understand how these themes
work, we need to know a little about how Colophon handles styling and CSS in
general.

The default ◊code{<head>} tag for an HTML page generated by Colophon contains a
number of ◊code{<link>} tags for CSS stylesheets. In particular, there is a
◊code{fonts.css} (that we will ignore for now), a ◊code{stylesheet.css} and a
◊code{theme.css}. The ◊code{stylesheet.css} file contains most of the styling
for the page: margins, padding, fonts, everything that defines the basic look
and feel of the page. However, most of the time a color is required, this file
uses CSS variables instead of direct hex or RGB values. The values corresponding
to these variables are defined in ◊code{theme.css}. To change the colors in use,
we just need to provide a different CSS file with the colors of our choice.

But there's more! Each theme can have any number of ◊em{variants} by providing a
different set of these values for these variables. For example, the default
Grayscale theme that this site uses has both a light and a dark variant (since
dark mode is the new hotness these days). The ◊code{theme.css} file for
Grayscale provides selectors for ◊code{.theme-light} and ◊code{.theme-dark} as
follows:

◊codeblock['css]{
.theme-light {
    --bg-color: #f7f7f7;
    --bg-alt-color: #222222;
    --bg-sel-color: #cce3ee;
    --text-color: #333333;
    --text-alt-color: #f7f7f7;
    --text-sel-color: #222222;
    --text-hdr-color: #000000;
    --code-text-color: #222222;
    --code-bg-color: #fbfbfb;
    --link-color: #0077aa;
    --link-visited-color: #66adcc;
    --link-bg-color: #f7f7f7;
    --border-color: #0077aa;
}

.theme-dark {
    --bg-color: #333333;
    --bg-alt-color: #f7f7f7;
    --bg-sel-color: #cce3ee;
    --text-color: #f7f7f7;
    --text-alt-color: #333333;
    --text-sel-color: #222222;
    --text-hdr-color: #66adcc;
    --code-text-color: #222222;
    --code-bg-color: #fbfbfb;
    --link-color: #66adcc;
    --link-visited-color: #0077aa;
    --link-bg-color: #333333;
    --border-color: #0077aa;
}

}

So far so good, but how does one go about using these themes and theme variants?
This is where Colophon's templating system comes in. Really, this is
◊a["https://docs.racket-lang.org/pollen/second-tutorial.html#%28part._tutorial-2._.Templates%29"]{Pollen's
template system}, but Colophon provides some handy functions to make writing
them easier. In particular, Colophon provides the ◊code{head-with} and
◊code{body-with} functions for generating HTML ◊code{<head>} and ◊code{<body>}
tags, but with Colophon-specific components. The ◊code{head-with} takes a
◊code{#:theme} argument that is a URL to a CSS file, and ◊code{body-with} has a
◊code{#:theme-variant} that lets you specify a theme variant (◊code{light} or
◊code{dark} in the case of the Grayscale theme). The template for these post
pages looks like this:

◊codeblock['html]{
<!DOCTYPE html>
<html lang="en">
  ◊"◊"(->html (head-with #:theme "/css/grayscale.css"))
  ◊"◊"(->html (body-with
            #:navigation (navbar)
            #:theme-variant "light"
            #:contents
                `(article ((id "content"))
                          ,@(make-top metas)
                          ,@(remove-tag more-tag (select* 'root doc)))))

  <footer>
    <!-- Copyright notice goes here -->
  </footer>

</html>
}

As you can see, the post template is HTML with some Pollen code sprinkled in to
do the heavy lifting. The ◊code{body-with} function lets you build up the page
by providing a navigation bar (with ◊code{"#:navigation"}) and the main contents
(with ◊code{#:contents}). In this case, we're using a ◊code{navbar} we defined
elsewhere and then used some Colophon utility functions to put the contents of a
post inside an ◊code{<article>} tag, automatically generate some top-matter and
remove the ◊code{more} tag that tells Colophon where to stop when generating an
excerpt.

Right now, the theme and templating system is admittedly a little inelegant. It
readily exposes the fact that we're just hooking up various pieces of HTML and
CSS. It also has quirks like requiring the theme to be part of the ◊code{<head>}
tag, but the variant to be in the ◊code{<body>}. Changing a theme also requires
editing (possibly multiple) templates, which is going to be a pain if you want
lots of different types of pages. These are all things I'd like to address once
Colophon's core functionality is a little more fleshed out. But for now, it gets
the job done, and I think the basic ideas of how it works and is implemented are
solid, while allowing for future user-facing improvements.